import type { Project } from "@/lib/content-store"

export const initialProjects: Project[] = [
  {
    id: "project-1",
    title: "E-commerce Platform",
    description: "A full-featured e-commerce platform with product management, shopping cart, and payment processing.",
    longDescription:
      "Built a scalable e-commerce solution using React for the frontend and Node.js for the backend. Implemented features such as product search, filtering, user authentication, shopping cart, and payment processing with Stripe. The platform also includes an admin dashboard for managing products, orders, and customers.",
    image: "/placeholder.svg?height=400&width=600&text=E-commerce+Platform",
    tags: ["React", "Node.js", "MongoDB", "Express", "Stripe API"],
    demoUrl: "https://example.com/demo",
    githubUrl: "https://github.com/johndoe/ecommerce",
    category: "web",
    features: [
      "User authentication and authorization",
      "Product catalog with categories and search",
      "Shopping cart and checkout process",
      "Payment processing with Stripe",
      "Order tracking and history",
      "Admin dashboard for product and order management",
      "Responsive design for mobile and desktop",
    ],
    challenges: [
      "Implementing a secure payment processing system",
      "Optimizing database queries for large product catalogs",
      "Building a responsive UI that works well on all devices",
      "Managing user sessions and cart persistence",
    ],
    screenshots: [
      "/placeholder.svg?height=300&width=500&text=Homepage",
      "/placeholder.svg?height=300&width=500&text=Product+Page",
      "/placeholder.svg?height=300&width=500&text=Shopping+Cart",
      "/placeholder.svg?height=300&width=500&text=Admin+Dashboard",
    ],
  },
  {
    id: "project-2",
    title: "AI Image Generator",
    description: "A web application that uses machine learning to generate images based on text descriptions.",
    longDescription:
      "Developed a web application that leverages OpenAI's DALL-E API to generate images from text prompts. The frontend is built with Next.js and features a responsive design. Users can save their generated images, share them on social media, and explore a gallery of public generations.",
    image: "/placeholder.svg?height=400&width=600&text=AI+Image+Generator",
    tags: ["Next.js", "OpenAI API", "Tailwind CSS", "Vercel"],
    demoUrl: "https://example.com/demo",
    githubUrl: "https://github.com/johndoe/ai-image-generator",
    category: "ai",
    features: [
      "Text-to-image generation using OpenAI's DALL-E API",
      "User authentication and saved generations",
      "Gallery of public generations",
      "Social media sharing",
      "Image customization options",
      "Responsive design",
    ],
    challenges: [
      "Managing API rate limits and costs",
      "Optimizing image loading and caching",
      "Implementing secure user authentication",
      "Creating an intuitive user interface for image generation",
    ],
    screenshots: [
      "/placeholder.svg?height=300&width=500&text=Homepage",
      "/placeholder.svg?height=300&width=500&text=Generation+Interface",
      "/placeholder.svg?height=300&width=500&text=Gallery",
      "/placeholder.svg?height=300&width=500&text=User+Profile",
    ],
  },
  {
    id: "project-3",
    title: "Task Management App",
    description: "A collaborative task management application with real-time updates and team features.",
    longDescription:
      "Created a task management application that allows teams to collaborate on projects in real-time. Features include task creation, assignment, due dates, comments, file attachments, and status tracking. The application uses Firebase for real-time database and authentication, and React for the frontend.",
    image: "/placeholder.svg?height=400&width=600&text=Task+Management+App",
    tags: ["React", "Firebase", "Material UI", "Redux"],
    demoUrl: "https://example.com/demo",
    githubUrl: "https://github.com/johndoe/task-manager",
    category: "web",
    features: [
      "Real-time task updates and collaboration",
      "Project and team management",
      "Task assignment, due dates, and priority levels",
      "Comments and file attachments",
      "Kanban board and list views",
      "Email notifications",
      "Mobile-responsive design",
    ],
    challenges: [
      "Implementing real-time updates with Firebase",
      "Managing complex state with Redux",
      "Designing an intuitive user interface for task management",
      "Optimizing performance for large projects and teams",
    ],
    screenshots: [
      "/placeholder.svg?height=300&width=500&text=Dashboard",
      "/placeholder.svg?height=300&width=500&text=Kanban+Board",
      "/placeholder.svg?height=300&width=500&text=Task+Details",
      "/placeholder.svg?height=300&width=500&text=Team+Management",
    ],
  },
  {
    id: "project-4",
    title: "Sentiment Analysis Tool",
    description: "A machine learning model that analyzes sentiment in text data, with a web interface for easy use.",
    longDescription:
      "Built a sentiment analysis tool that uses natural language processing to determine the sentiment (positive, negative, or neutral) of text data. The model was trained on a large dataset of product reviews and social media posts. The web interface allows users to input text or upload files for analysis, and provides visualizations of the results.",
    image: "/placeholder.svg?height=400&width=600&text=Sentiment+Analysis+Tool",
    tags: ["Python", "Flask", "NLTK", "scikit-learn", "D3.js"],
    demoUrl: "https://example.com/demo",
    githubUrl: "https://github.com/johndoe/sentiment-analysis",
    category: "ai",
    features: [
      "Text sentiment analysis (positive, negative, neutral)",
      "Batch processing of text files",
      "Visualization of sentiment distribution",
      "Entity recognition and key phrase extraction",
      "API for integration with other applications",
      "Customizable sentiment thresholds",
    ],
    challenges: [
      "Training an accurate sentiment analysis model",
      "Processing and cleaning large text datasets",
      "Creating meaningful visualizations of sentiment data",
      "Optimizing the model for performance and accuracy",
    ],
    screenshots: [
      "/placeholder.svg?height=300&width=500&text=Analysis+Interface",
      "/placeholder.svg?height=300&width=500&text=Results+Dashboard",
      "/placeholder.svg?height=300&width=500&text=Batch+Processing",
      "/placeholder.svg?height=300&width=500&text=API+Documentation",
    ],
  },
  {
    id: "project-5",
    title: "Fitness Tracking Mobile App",
    description: "A cross-platform mobile application for tracking workouts, nutrition, and fitness goals.",
    longDescription:
      "Developed a mobile application for fitness enthusiasts to track their workouts, nutrition, and progress towards fitness goals. The app includes features such as workout plans, exercise demonstrations, calorie tracking, progress charts, and social sharing. Built with React Native for cross-platform compatibility.",
    image: "/placeholder.svg?height=400&width=600&text=Fitness+Tracking+App",
    tags: ["React Native", "Expo", "Firebase", "Redux", "HealthKit/Google Fit API"],
    demoUrl: "https://example.com/demo",
    githubUrl: "https://github.com/johndoe/fitness-tracker",
    category: "mobile",
    features: [
      "Workout tracking and custom workout plans",
      "Exercise library with demonstrations",
      "Nutrition and calorie tracking",
      "Progress charts and statistics",
      "Goal setting and achievement tracking",
      "Integration with HealthKit and Google Fit",
      "Social sharing and community features",
    ],
    challenges: [
      "Integrating with health and fitness APIs",
      "Building a responsive and intuitive mobile UI",
      "Managing complex state across the application",
      "Ensuring accurate tracking of fitness metrics",
    ],
    screenshots: [
      "/placeholder.svg?height=300&width=500&text=Dashboard",
      "/placeholder.svg?height=300&width=500&text=Workout+Tracker",
      "/placeholder.svg?height=300&width=500&text=Nutrition+Log",
      "/placeholder.svg?height=300&width=500&text=Progress+Charts",
    ],
  },
  {
    id: "project-6",
    title: "Weather Dashboard",
    description: "A weather dashboard that displays current conditions and forecasts for multiple locations.",
    longDescription:
      "Created a weather dashboard that provides current conditions and forecasts for multiple locations. The application uses the OpenWeatherMap API for weather data and includes features such as location search, saved locations, hourly and daily forecasts, and weather maps. The frontend is built with Vue.js and features a responsive design.",
    image: "/placeholder.svg?height=400&width=600&text=Weather+Dashboard",
    tags: ["Vue.js", "OpenWeatherMap API", "Chart.js", "Vuetify"],
    demoUrl: "https://example.com/demo",
    githubUrl: "https://github.com/johndoe/weather-dashboard",
    category: "web",
    features: [
      "Current weather conditions and forecasts",
      "Location search and saved locations",
      "Hourly and daily forecast views",
      "Weather maps and radar",
      "Weather alerts and notifications",
      "Responsive design for mobile and desktop",
    ],
    challenges: [
      "Integrating with the OpenWeatherMap API",
      "Displaying complex weather data in an intuitive way",
      "Optimizing performance for multiple location tracking",
      "Building responsive visualizations of weather data",
    ],
    screenshots: [
      "/placeholder.svg?height=300&width=500&text=Dashboard",
      "/placeholder.svg?height=300&width=500&text=Forecast+View",
      "/placeholder.svg?height=300&width=500&text=Weather+Map",
      "/placeholder.svg?height=300&width=500&text=Location+Management",
    ],
  },
]

